var __defProp = Object.defineProperty;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
import maxSizeModifier from "popper-max-size-modifier";
import {applyMaxSizeModifier} from "./applyMaxSize";
import {matchReferenceWidthModifier} from "./matchReferenceWidth";
function getPopoverModifiers({
  allowedAutoPlacements,
  arrow,
  arrowElement,
  boundaryElement,
  constrainSize,
  distance,
  fallbackPlacements,
  matchReferenceWidth,
  preventOverflow,
  skidding,
  tether,
  tetherOffset
}) {
  return [
    constrainSize && __objSpread(__objSpread({}, maxSizeModifier), {
      options: {
        boundary: boundaryElement || void 0,
        padding: 8
      }
    }),
    constrainSize && applyMaxSizeModifier,
    arrow && {
      name: "arrow",
      options: {
        element: arrowElement,
        padding: 4
      }
    },
    preventOverflow && {
      name: "preventOverflow",
      options: {
        altAxis: true,
        boundary: boundaryElement || void 0,
        padding: 8,
        tether,
        tetherOffset
      }
    },
    {
      name: "offset",
      options: {
        offset: [skidding, distance]
      }
    },
    {
      name: "flip",
      options: {
        allowedAutoPlacements,
        boundary: boundaryElement || void 0,
        fallbackPlacements,
        padding: 8
      }
    },
    matchReferenceWidth && matchReferenceWidthModifier
  ].filter(Boolean);
}
export {
  getPopoverModifiers
};
